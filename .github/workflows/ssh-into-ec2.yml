name: SSH into an ec2 instance
on:
  push:
    branches: main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform apply
        id: terraform-apply
        run: |
          cd deploy
          terraform init
          terraform apply --auto-approve
          echo "hostname=$(terraform output -raw epicstory-api-host)" >> "$GITHUB_OUTPUT"
      - name: Echo hostname
        run: echo ${{steps.terraform-apply.outputs.hostname}}
      - name: SSH into deployed instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{steps.terraform-apply.outputs.hostname}}
          username: ec2-user
          key: ${{secrets.SSH_PRIVATE_KEY}}
          script: |
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set region ${{ secrets.AWS_REGION }}
            aws ec2 wait instance-exists \
              --filters "Name=tag:Name,Values=epicstory-app" \
              --filters "Name=instance-state-name,Values=running"
            export APP_DNS=$(aws ec2 describe-instances \
              --output text \
              --query Reservations[*].Instances[*].PublicDnsName \
              --filters "Name=tag:Name,Values=epicstory-app")
            echo "export CORS_ORIGINS=$APP_DNS" >> ~/.bashrc
            source ~/.bashrc
            echo $CORS_ORIGINS
